################################################################################
# v0.26 2021-June-10                                                           #
# This Ansible playbook comes with no guarantees                               #
# The use of this Ansible playbook is responsibility solely of who executes it #
# No liabilities shall be deemed to the creator of this Ansible playbook       #
#                                                                              #
# Ansible playbook hosted in                                                   #
# https://github.com/gustavos86/OperatingCiscoACIwithAnsible                   #
################################################################################

# whattodo (defaults to 'present') possible choices are: 
# present - Policies are created only if these are not already configured
# absent - Policies are removed
# query - Query for state
# whattodo: present

###############################
#                             #
#       Access Policies       #
#                             #
###############################

###################################
# roles:                          #
# - Interface_Selectors           #
# - Switch_and_Interface_Profiles #
# - enable_or_disable_ports       #
###################################

### Switches and Interfaces mapping ###
# Optional. Switch Policy Group attached to all Switch Profiles. Comment if not needed.

#All_Leaf_Switches_Policy_Group: default

# port_state can be: enabled or disabled

Switch_name_suffix: '_SwProf'
Interface_name_suffix: '_IntProf'
include_node_id_in_switch_profile_name: 'no'

Switches_and_Interfaces_map:
  - switch_name: Leaf1101
    pod: 1
    switch_node_id: 1101

  - switch_name: Leaf1102
    pod: 1      
    switch_node_id: 1102
    ports_list:
    - { port: 18, port_state: enabled }
    - { port: 19, port_state: enabled }
    - { port: 20, port_state: enabled, port_description: ,               interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort, state: absent } # optional state: absent
    - { port: 21, port_state: enabled,                                   interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
    - { port: 22, port_state: enabled,                                   interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
    - { port: 23, port_state: enabled, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC}
  - switch_name: Leaf1103
    pod: 1
    switch_node_id: 1103
    ports_list:
    - { port: 30, port_state: disabled, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
    - { port: 31, port_state: disabled, port_description: Router,         interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
    - { port: 32, port_state: disabled, port_description: Router,         interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
    - { port: 33, port_state: disabled, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }
  - switch_name: Leaf1104
    pod: 1
    switch_node_id: 1104
    ports_list:
    - { port: 33, port_state: enabled, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }
    - { port: 40, port_state: enabled, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
    - { port: 41, port_state: enabled, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }

###################################
# roles                           #
# - Interface_Policy_Groups       #
###################################

# Add new Interface Policy Groups
# Specially useful to add Port-Channels and vPCs

### Individual Ports ###
# "lag_type: leaf" is for Access Ports
# Do not add "port_channel_policy" parameter here

Interface_Policy_Group_task_config:
  - interface_policy_group: Auto_CDP_LLDP_AccessPort
    lag_type: leaf
    AAEP: DC_AAEP
    link_level_policy: Auto_Link_Policy
    cdp_policy: CDP_On
    lldp_policy: LLDP_On
    mcp_policy: MCP_Off
    stp_interface_policy: default
    l2_interface_policy: PortLocal_scope
    fibre_channel_interface_policy: FCOE_F_TrunkOff_FCPolicy
    priority_flow_control_policy: PFC_Auto

### Port-Channels ###
#"lag_type: link" is for Port-Channels

  - interface_policy_group: 101_102_eth_4_5_PC
    lag_type: link
    port_channel_policy: Static_Mode
    AAEP: DC_AAEP
    link_level_policy: Auto_Link_Policy
    cdp_policy: CDP_On
    lldp_policy: LLDP_On
    mcp_policy: MCP_Off
    stp_interface_policy: default

###      vPCs     ###
# vPCs. "lag_type: node" is for vPCs

  - interface_policy_group: 101_102_eth_6_vPC
    lag_type: node
    port_channel_policy: Static_Mode
    AAEP: DC_AAEP
    link_level_policy: Auto_Link_Policy
    cdp_policy: CDP_On
    lldp_policy: LLDP_On
    mcp_policy: MCP_Off
    stp_interface_policy: default


###################################
# roles:                          #
# - AAEPs                         #
# - Domains                       #
# - VLAN_Pools                    #
###################################

# AAEPs, Domains and VLAN Pools
AAEP_task_config:
  - name: DC_AAEP
    domains:
      - domain_type: phys
        domain_name: DC_PhysDomain
        vlan_pools:
        - vlan_pool_name: DC_PhysDomainVlanPool
          vlan_pool_allocation_mode: static    # nees to be set to 'dynamic' for VMM integration
          vlans:
          - { vlan_range_start: 1001, vlan_range_end: 1049, description: 'test' }
          - { vlan_range_start: 1050, vlan_range_end: 1099, description: 'test' }
          - { vlan_range_start: 1100, vlan_range_end: 1149, description: 'test' }
          - { vlan_range_start: 1150, vlan_range_end: 1199, description: 'test' }
          - { vlan_range_start: 1200, vlan_range_end: 1250, description: 'test' }   
      - domain_type: l3dom
        domain_name: DC_L3Domain
        vlan_pools:
        - vlan_pool_name: DC_L3DomainVlanPool
          vlan_pool_allocation_mode: static
          vlans:
          - { vlan_range_start: 200, vlan_range_end: 249, description: 'test' }
          - { vlan_range_start: 250, vlan_range_end: 299, description: 'test' }
          - { vlan_range_start: 300, vlan_range_end: 349, description: 'test' }
          - { vlan_range_start: 350, vlan_range_end: 399, description: 'test' }                    

###################################
# roles:                          #
# - Interface_Policies            #
###################################

# Interface Policies. Naming convention can be modified here.
CDP_config:
  - { name: CDP_On, admin_state: yes }
  - { name: CDP_Off, admin_state: no }
LLDP_config:
  - { name: LLDP_On, transmit_state: yes, receive_state: yes }
  - { name: LLDP_Off, transmit_state: no, receive_state: no  }
# Lacks option to configure Trunking
Fibre_Channel_config:
  - { name: FC_F_Port, port_mode: f   }
  - { name: FC_NP_Port, port_mode: np }
MCP_config:
  - { name: MCP_On, admin_state: yes }
  - { name: MCP_Off, admin_state: no }
Link_Level_config:
  - { name: 100G_Link_Policy, speed: 100G }
  - { name: 40G_Link_Policy, speed: 40G }
  - { name: 25G_Link_Policy, speed: 25G }
  - { name: 10G_Link_Policy, speed: 10G }
  - { name: 1G_Link_Policy, speed: 1G }
  - { name: 100M_Link_Policy, speed: 100M }
  - { name: Auto_Link_Policy, speed: inherit }
Port_Channel_config:
  - { name: LACP_Active, mode: active }
  - { name: LACP_Passive, mode: passive }
  - { name: MAC_Pinning, mode: mac-pin }
  - { name: MAC_Pinning_NIC_Load, mode: mac-pin-nicload }
  - { name: Static_Mode, mode: Off }
Spanning_Tree_Interface_config:
  - { name: BPDU_Off, stp_control: "" }
  - { name: BPDU_Filter, stp_control: bpdu-filter }
  - { name: BPDU_Guard, stp_control: bpdu-guard }
  - { name: BPDU_Filter_Guard, stp_control: "bpdu-filter,bpdu-guard" }
L2_Interface_config:
  - { name: PortLocal_scope,   vlan_scope: portlocal }
  - { name: Global_scope,      vlan_scope: global    }

###############################
#                             #
#           Tenants           #
#                             #
###############################


###################################################################
# roles:                                                          #
# - Tenants_and_VRFs                                              #
#                                                                 #
# run with:                                                       #
# ansible-playbook aci_playbook.yaml -i inventory --tags tenants  #
# ansible-playbook aci_playbook.yaml -i inventory --tags vzany    #
#                                                                 #
###################################################################

# - Required parameters with --tags tenants
#
# Tenant_name:
# VRF_name:
#
# - Required parameters with --tags vzany
#
# vzAny: yes or no
#
# - Optional parameters:
#
# vrf_state: absent or present         # default is present

Tenants_VRFs:
- { Tenant_name: Ansible_Tnt,  VRF_name: VRF_DEV,  vzAny: yes }
- { Tenant_name: Ansible_Tnt,  VRF_name: VRF_TEST, vzAny: no  }
- { Tenant_name: Ansible_Tnt2, VRF_name: VRF_DEV              }
- { Tenant_name: Ansible_Tnt2, VRF_name: VRF_TEST, vrf_state: absent }

###############################################################
# roles:                                                      #
# - BridgeDomains_and_Subnets                                 #
#                                                             #
# run with:                                                   #
# ansible-playbook aci_playbook.yaml -i inventory --tags bds  #
#                                                             #
###############################################################

# BD Subnet is created for those Bridge domains which have the optional parameters bd_subnet: and bd_subnet_mask: defined
# scope: is only defined when the above condition is met
#
# - Required parameters:
#
# Tenant_name:
# BD_name:
#
# - Optional parameters:
#
# enable_routing: yes or no                 # default is no
#
# scope: public                             # this is "Advertised Externally"
# scope: shared                             # this is "Shared Between VRFs"
# scope: "public,shared"                    # this is "Advertised Externally" & "Shared Between VRFs"
#
# arp_flooding: no or yes                   # default is yes
# l2_unknown_unicast: proxy or flood        # default is proxy
# l3_unknown_multicast: flood or opt-flood  # default is flood
#
# bd_state: absent or present               # default is present
#
# Gateway_MAC_address: 02:00:25:00:11:28    # sets the MAC address for all the BD Subnets in the playbook. Global parameter

BridgeDomains_Subnets:
# Simplest BD example
- { Tenant_name: Ansible_Tnt, BD_name: Simplest_BD                    }
# Delete BD example
- { Tenant_name: Ansible_Tnt, BD_name: Deleted_BD,   bd_state: absent }
# More BD examples
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  BD_name: VLAN1001_192_168_1_0_24_BD, bd_subnet: 192.168.1.1, bd_subnet_mask: 24, enable_routing: yes, scope: "public,shared" }  
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  BD_name: VLAN1002_192_168_2_0_24_BD, bd_subnet: 192.168.2.1, bd_subnet_mask: 24, enable_routing: yes, scope: public,         }  
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  BD_name: VLAN1003_192_168_3_0_24_BD, bd_subnet: 192.168.3.1, bd_subnet_mask: 24, enable_routing: yes,                        }  
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  BD_name: VLAN1004_192_168_4_0_24_BD, bd_subnet: 192.168.4.1, bd_subnet_mask: 24,                                             }  
# Storage type BD example
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV, BD_name: Storage_BD,  bd_type: fc }  


#####################################
# roles:                            #
# - AppProfiles_and_EPGs            #
# - Domains_and_EPG_Static_Bindings #
#####################################
#
# Optional parameters:
# VMM_deploy_immediacy:          lazy or immediate                   # default is lazy
# VMM_resolution_immediacy:      lazy or immediate or pre-provision  # default is lazy
# port_profile_deploy_immediacy: lazy or immediate                   # default is lazy 
#
# Config (uncomment if required):
# VMM_deploy_immediacy:          immediate
# VMM_resolution_immediacy:      pre-provision 
# port_profile_deploy_immediacy: immediate
#

AppProfiles_EPGs_Domains_Static_Bindings:
- { Tenant_name: Ansible_Tnt, AppProfile_name: Networks, EPG_name: SimplestEPG                    }
- { Tenant_name: Ansible_Tnt, AppProfile_name: Networks, EPG_name: Deleted_EPG, epg_state: absent }

- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  AppProfile_name: Networks, EPG_name: VLAN1001_192_168_1_0_24_EPG, BD_name: VLAN1001_192_168_1_0_24_BD, domain_name: PhysicalDomain, domain_type: phys, Encap_VLAN: 1001, Static_Binding: "{{ port_profile_1 }}" }
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  AppProfile_name: Networks, EPG_name: VLAN1002_192_168_2_0_24_VM,  BD_name: VLAN1002_192_168_2_0_24_BD, domain_name: VMM_Domain_test, domain_type: vmm, VM_platform: vmware                                      }
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  AppProfile_name: Networks, EPG_name: VLAN1003_192_168_3_0_24_EPG, BD_name: VLAN1003_192_168_3_0_24_BD, domain_name: PhysicalDomain, domain_type: phys, Encap_VLAN: 1003, Static_Binding: "{{ port_profile_1 }}" }
- { Tenant_name: Ansible_Tnt, VRF_name: VRF_DEV,  AppProfile_name: Networks, EPG_name: VLAN1004_192_168_4_0_24_EPG, BD_name: VLAN1004_192_168_4_0_24_BD, domain_name: PhysicalDomain, domain_type: phys, Encap_VLAN: 1004, Static_Binding: "{{ port_profile_1 }}" }

- { Tenant_name: Ansible_Tnt, VRF_name: VRF_TEST, AppProfile_name: StorageNetworks, EPG_name: Storage_EPG, BD_name: Storage_BD, storage_domain_name: FC_Domain, Storage_FC_FCoE_Static_Binding: "{{ port_profile_storage_1 }}" }

# "Port-Profiles" Trunk VLANs on links
# Create the "Port-Profiles" here:

port_profile_1:
- { Pod_ID: 1, Switch_ID: 1102,        interface_type: switch_port,  port: 1/21,                state: absent     }    # optional  state: absent
- { Pod_ID: 1, Switch_ID: 1103,        interface_type: switch_port,  port: 1/30,                native_vlan: 1001 }    # optional  native_vlan: 1001
- { Pod_ID: 1, Switch_ID: 1103,        interface_type: port_channel, port: 101_102_eth_4_5_PC                     }
- { Pod_ID: 1, Switch_ID: [1103,1104], interface_type: vpc,          port: 101_102_eth_6_vPC,   native_vlan: 1003 }

port_profile_storage_1:
- { Pod_ID: 1, Switch_ID: 1101, interface_type: switch_port,  vsan_ID: 10, port: 1/21                }
- { Pod_ID: 1, Switch_ID: 1102, interface_type: switch_port,  vsan_ID: 20, port: 1/31, state: absent }
- { Pod_ID: 1, Switch_ID: 1101, interface_type: switch_port,  vsan_ID: 10, port: 1/22                }
- { Pod_ID: 1, Switch_ID: 1102, interface_type: switch_port,  vsan_ID: 20, port: 1/32, state: absent }
- { Pod_ID: 1, Switch_ID: 1103, interface_type: switch_port,  vsan_ID: 10, port: 1/21                }
- { Pod_ID: 1, Switch_ID: 1104, interface_type: switch_port,  vsan_ID: 20, port: 1/21                }
- { Pod_ID: 1, Switch_ID: 1101, interface_type: port_channel, vsan_ID: 10, port: SAN_PolGrp          }
- { Pod_ID: 1, Switch_ID: 1102, interface_type: port_channel, vsan_ID: 20, port: SAN_PolGrp          }
- { Pod_ID: 1, Switch_ID: 1103, interface_type: port_channel, vsan_ID: 10, port: SAN_PolGrp          }
- { Pod_ID: 1, Switch_ID: 1104, interface_type: port_channel, vsan_ID: 20, port: SAN_PolGrp          }

#####################################
# roles:                            #
# - EPG_to_EPG_Contracts            #
#####################################

EPG_to_EPG_Contracts:

- Tenant_name: Ansible_Tnt
  Contract_name: v1001_to_v1002_CT
  Entries:
  - Entry_name:     web-http
    ether_type:     ip     # ether_type: unspecified | ip
    ip_protocol:    tcp    # ip_protocol: unspecified | icmp | tcp |  udp
    dst_port_start: 80
    dst_port_end:   80
  - Entry_name:     web-https
    ether_type:     ip     # ether_type: unspecified | ip
    ip_protocol:    tcp    # ip_protocol: unspecified | icmp | tcp |  udp
    dst_port_start: 443
    dst_port_end:   443
  - Entry_name:     ssh
    ether_type:     ip     # ether_type: unspecified | ip
    ip_protocol:    tcp    # ip_protocol: unspecified | icmp | tcp |  udp
    dst_port_start: 22
    dst_port_end:   22
  EPGs:
  - App_Profile: Networks
    EPG_name: VLAN1001_192_168_1_0_24_EPG
    consumer_or_provider: consumer          # consumer is SRC / provider is DST
  - App_Profile: Networks 
    EPG_name: VLAN1002_192_168_2_0_24_EPG  
    consumer_or_provider: provider          # consumer is SRC / provider is DST
# L3Out_ExtEPGs:
# - L3Out_name: test_L3Out1
#   ExtEPG_name: ExtEPG
#   consumer_or_provider: provider          # consumer is SRC / provider is DST


####################################
# roles:                           #
# - L3Outs                         #
####################################

L3Outs: 
  ### L3Out Initial configuration section ###
  - L3Out_name: L3Out1
    Tenant_name: Ansible_Tnt
    VRF_name: VRF_TEST
    L3Domain_name: L3-EXTERNAL
    enable_BGP: yes
    enable_OSPF: yes
    OSPF_Area_ID: 0.0.0.23
    OSPF_Area_Type: nssa        # OSPF_Area_Type: nssa | regular| stub
    ### External EPGs ###
    ExtEPGs:
    - ExtEPG_name: custom_name_ExtEPG
    ### Node Profiles ###
    NodeProfiles:
    - NodeProfile_name: NodeProfile
      Router_ID_as_Loopback: "no"
      Switches:
      - Switch_Pod_ID: 1
        Switch_Node_ID: 103
        Switch_Router_ID: 3.3.3.3
      - Switch_Pod_ID: 1
        Switch_Node_ID: 104
        Switch_Router_ID: 4.4.4.4
      ### Static Routes (optional) ###
      Static_Routes:
      - { Network: 0.0.0.0/0,       Next_Hop: 10.0.1.254, state:         }  # state 'absent' to remove static route
      - { Network: 192.168.91.0/24, Next_Hop: 10.0.1.254, state: absent  }  # state 'absent' to remove static route
      - { Network: 192.168.92.0/24, Next_Hop: 10.0.1.254                 }
      - { Network: 192.168.93.0/24, Next_Hop: 10.0.1.254                 }
      - { Network: 192.168.94.0/24, Next_Hop: 10.0.1.254                 }
      ### Interface Profiles ###
      InterfaceProfiles:
      - InterfaceProfile_name: InterfaceProfile
        Interfaces:
          ### single-port section ###
        - Layer3_type: svi             # Layer3_type: sub-interface | svi
          Layer2_type: single-port     # Layer2_type: single-port | port-channel | vpc 
          Switch_Pod_ID: 1             
          Switch_Node_ID: 103
          Port: 40
          IP_Address_Mask: 10.1.1.1/24
          VLAN_ID: 101
          MTU: 9216
          #############################
          BGP_Peers:
          - Peer_IP: 10.1.1.2
            Remote_AS: 65001
            Local_AS: 123
            Password: testpass
            enable_BFD: yes
          - Peer_IP: 10.1.1.3
            Remote_AS: 65001
            Local_AS: 123
            Password: testpass
            enable_BFD: yes
          ### vpc specific section ###
        - Layer3_type: svi
          Layer2_type: vpc            # note that Layer2_type: 'vpc' can only be used with Layer3_type: 'svi'
          Switch_Pod_ID: 1
          Switch_Node_IDs: [103,104]
          vPC_Policy_Group: FW123-A_vPC
          IP_Address_A_Mask: 10.0.1.2/24
          IP_Address_B_Mask: 10.0.1.3/24
          IP_Address_VIP_Mask: 10.0.1.1/24
          VLAN_ID: 102
          MTU: 9216
          #############################
          BGP_Peers:
          - Peer_IP: 10.1.2.2
            Remote_AS: 65001
            Password: testpass
          - Peer_IP: 10.1.2.3
            Remote_AS: 65001
          ### port-channel section ###
        - Layer3_type: sub-interface
          Layer2_type: port-channel
          Switch_Pod_ID: 1
          Switch_Node_ID: 103
          PC_Policy_Group: FW123-A_PC
          IP_Address_Mask: 10.1.2.1/24
          VLAN_ID: 103
          MTU: 9216
          #############################

  ### L3Out Initial configuration section ###
  - L3Out_name: L3Out2
    Tenant_name: Ansible_Tnt
    VRF_name: VRF_TEST
    L3Domain_name: L3-EXTERNAL
    enable_BGP: yes
    enable_OSPF: yes
    OSPF_Area_ID: 0.0.0.24
    OSPF_Area_Type: nssa        # OSPF_Area_Type: nssa | regular| stub
    ### Node Profiles ###
    NodeProfiles:
    - NodeProfile_name: NodeProfile
      Router_ID_as_Loopback: "no"
      Switches:
      - Switch_Pod_ID: 1
        Switch_Node_ID: 103
        Switch_Router_ID: 3.3.3.3
      - Switch_Pod_ID: 1
        Switch_Node_ID: 104
        Switch_Router_ID: 4.4.4.4
      ### Interface Profiles ###
      InterfaceProfiles:
      - InterfaceProfile_name: InterfaceProfile
        Interfaces:
          ### port-channel section ###
        - Layer3_type: sub-interface
          Layer2_type: port-channel
          Switch_Pod_ID: 1
          Switch_Node_ID: 103
          PC_Policy_Group: FW123-A_PC
          IP_Address_Mask: 10.99.10.1/31
          VLAN_ID: 201
          MTU: 9216
          #############################
        - Layer3_type: sub-interface
          Layer2_type: port-channel
          Switch_Pod_ID: 1
          Switch_Node_ID: 103
          PC_Policy_Group: FW123-B_PC
          IP_Address_Mask: 10.99.10.3/31
          VLAN_ID: 202
          MTU: 9216
          #############################
        - Layer3_type: sub-interface
          Layer2_type: port-channel
          Switch_Pod_ID: 1
          Switch_Node_ID: 104
          PC_Policy_Group: FW123-A_PC
          IP_Address_Mask: 10.99.10.5/31
          VLAN_ID: 203
          MTU: 9216
          #############################
        - Layer3_type: sub-interface
          Layer2_type: port-channel
          Switch_Pod_ID: 1
          Switch_Node_ID: 104
          PC_Policy_Group: FW123-B_PC
          IP_Address_Mask: 10.99.10.7/31
          VLAN_ID: 204
          MTU: 9216
          #############################