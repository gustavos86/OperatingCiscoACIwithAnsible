################################################################################
# AccessPolicies.yaml v0.2 2021-May-04                                         #
# This Ansible playbook comes with no guarantees                               #
# The use of this Ansible playbook is responsibility solely of who executes it #
# No liabilities shall be deemed to the creator of this Ansible playbook       #
#                                                                              #
################################################################################

- name: ACI Access Policies
  hosts: apicsim_sandbox
  connection: local
  gather_facts: no  

  vars:
    aci_login: &aci_login
      hostname: "{{ ansible_host }}"
      username: "{{ username }}"
      password: "{{ password }}"

    ##################
    #                #
    #     CONTROL    #
    #                #
    ##################

    ########################################################################
    # whattodo possible choices are: 
    # present - Policies are created only if these are not already configured
    # absent - Policies are removed
    # query - Query for status
    whattodo: present

    # Interfaces (regular operation)
    run_Interface_Policy_Group_task:       yes   # Create Interface Access Port, Port-Channels and vPCs
    run_Interface_Selector_task:           yes   # Assign the previous items to specific ports on the Switches
    run_Switch_and_Interface_Profile_task: yes   # Switches (needed when adding new switches to ACI)

    # AAEPs, Domains and VLAN Pools
    run_AAEPs_task:                        yes
    run_Domains_task:                      yes
    run_Pools_task:                        yes

    # Access Policies (required just one time)
    # CDP, LLDP, Fibre Channel, MCP, Link Level, Port Channel, Spanning Tree Interface
    run_Interface_Policies_task:           yes

    ########################################################################
    
    ##################
    #                #
    #      DATA      #
    #                #
    ##################

    ########################################################################
    # Switches and Interfaces mapping

    # Optional. Policy Group attach to Switch Profile. Comment if not needed.
    All_Leaf_Switches_Policy_Group: default

     # Must have below to have port_list empty and avoid error in playbook.
     #  ports_list:
     #  - continue

    Switches_and_Interfaces_map:
      - switch_name: HGSG111LEAF
        switch_node_id: 111
        ports_list:
        - continue
        #- { port: 1, port_description: ,interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        #- { port: 2, port_description: ,interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
        #- { port: 3, port_description: ,interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }

      - switch_name: HGSG112LEAF
        switch_node_id: 112
        ports_list:
        - { port: 20, port_description: ,               interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 21, port_description: ,               interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 22, port_description: Router,         interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
        - { port: 23, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }

      - switch_name: HGSG113LEAF
        switch_node_id: 113
        ports_list:
        - { port: 30, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 31, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 32, port_description: Router,         interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
        - { port: 33, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }


      - switch_name: HGSG114LEAF
        switch_node_id: 114
        ports_list:
        - { port: 40, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 41, port_description: VMwareCluster1, interface_type: switch_port, interface_policy_group: Auto_CDP_LLDP_AccessPort }
        - { port: 42, port_description: Router,         interface_type: port_channel, interface_policy_group: 101_102_eth_4_5_PC }
        - { port: 43, port_description: FirewallA,      interface_type: vpc, interface_policy_group: 101_102_eth_6_vPC }


    # Add new Interface Policy Groups
    # Specially useful to add Port-Channels and vPCs

    ########################
    ### Individual Ports ###
    ########################
    # "lag_type: leaf" is for Access Ports
    # Do not add "port_channel_policy" parameter here.

    Interface_Policy_Group_task_config:
      - interface_policy_group: Auto_CDP_LLDP_AccessPort
        lag_type: leaf
        AAEP: DC_AAEP
        link_level_policy: Auto_Link_Policy
        cdp_policy: CDP_On
        lldp_policy: LLDP_On
        mcp_policy: MCP_Off
        stp_interface_policy: default

    #####################
    ### Port-Channels ###
    #####################
    #"lag_type: link" is for Port-Channels

      - interface_policy_group: 101_102_eth_4_5_PC
        lag_type: link
        port_channel_policy: Static_Mode
        AAEP: DC_AAEP
        link_level_policy: Auto_Link_Policy
        cdp_policy: CDP_On
        lldp_policy: LLDP_On
        mcp_policy: MCP_Off
        stp_interface_policy: default

    #####################
    ###      vPCs     ###
    #####################
    # vPCs. "lag_type: node" is for vPCs

      - interface_policy_group: 101_102_eth_6_vPC
        lag_type: node
        port_channel_policy: Static_Mode
        AAEP: DC_AAEP
        link_level_policy: Auto_Link_Policy
        cdp_policy: CDP_On
        lldp_policy: LLDP_On
        mcp_policy: MCP_Off
        stp_interface_policy: default

    ########################################################################

    ########################################################################
    # # AAEPs, Domains and VLAN Pools
    AAEP_task_config:
      - name: DC_AAEP
        domains:
          - domain_type: phys
            domain_name: PhysicalDomain
            vlan_pools:
            - vlan_pool_name: Phys_StaticVlanPool
              vlan_pool_allocation_mode: static    # dynamic for VMM integration
              vlans:
              - { vlan_range_start: 1001, vlan_range_end: 1049 }
              - { vlan_range_start: 1050, vlan_range_end: 1099 }
              - { vlan_range_start: 1100, vlan_range_end: 1149 }
              - { vlan_range_start: 1150, vlan_range_end: 1199 }
              - { vlan_range_start: 1200, vlan_range_end: 1250 }   
          - domain_type: l3dom
            domain_name: RoutedDomain
            vlan_pools:
            - vlan_pool_name: Routed_StaticVlanPool
              vlan_pool_allocation_mode: static
              vlans:
              - { vlan_range_start: 200, vlan_range_end: 249 }
              - { vlan_range_start: 250, vlan_range_end: 299 }
              - { vlan_range_start: 300, vlan_range_end: 349 }
              - { vlan_range_start: 350, vlan_range_end: 399 }

    ########################################################################

    ########################################################################
    # Interface Policies. Naming convention can be modified here.
    CDP_config:
      - { name: CDP_On, admin_state: yes }
      - { name: CDP_Off, admin_state: no }

    LLDP_config:
      - { name: LLDP_On, transmit_state: yes, receive_state: yes }
      - { name: LLDP_Off, transmit_state: no, receive_state: no }

    # Lacks option to configure Trunking
    Fibre_Channel_config:
      - { name: FC_F_Port, port_mode: f }
      - { name: FC_NP_Port, port_mode: np }

    MCP_config:
      - { name: MCP_On, admin_state: yes }
      - { name: MCP_Off, admin_state: no }

    Link_Level_config:
      - {name: 100G_Link_Policy, speed: 100G }
      - {name: 40G_Link_Policy, speed: 40G }
      - {name: 25G_Link_Policy, speed: 25G }
      - {name: 10G_Link_Policy, speed: 10G }
      - {name: 1G_Link_Policy, speed: 1G }
      - {name: 100M_Link_Policy, speed: 100M }
      - {name: Auto_Link_Policy, speed: inherit }

    Port_Channel_config:
      - {name: LACP_Active, mode: active }
      - {name: LACP_Passive, mode: passive }
      - {name: MAC_Pinning, mode: mac-pin }
      - {name: MAC_Pinning_NIC_Load, mode: mac-pin-nicload }
      - {name: Static_Mode, mode: Off }

    Spanning_Tree_Interface_config:
      - {name: BPDU_Off, stp_control: ""}
      - {name: BPDU_Filter, stp_control: bpdu-filter }
      - {name: BPDU_Guard, stp_control: bpdu-guard }
      - {name: BPDU_Filter_Guard, stp_control: "bpdu-filter,bpdu-guard" }

    ########################################################################

  ###################################
  #                                 #
  #         Ansible Tasks           #
  #                                 #
  ###################################

  tasks:
  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_cdp_module.html#ansible-collections-cisco-aci-aci-interface-policy-cdp-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > CDP Interface
  - name: CDP Interface
    cisco.aci.aci_interface_policy_cdp:
      <<: *aci_login
      name: "{{ item.name }}"
      admin_state: "{{ item.admin_state }}"
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ CDP_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_lldp_module.html#ansible-collections-cisco-aci-aci-interface-policy-lldp-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > LLDP Interface
  - name: LLDP Interface
    cisco.aci.aci_interface_policy_lldp:
      <<: *aci_login
      lldp_policy: "{{ item.name }}"
      transmit_state: "{{ item.transmit_state }}"
      receive_state: "{{ item.receive_state }}"
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ LLDP_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_fc_module.html#ansible-collections-cisco-aci-aci-interface-policy-fc-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > Fibre Channel Interface
  - name: Fibre Channel Interface
    cisco.aci.aci_interface_policy_fc:
      <<: *aci_login
      fc_policy: "{{ item.name }}"
      port_mode: "{{ item.port_mode }}"
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ Fibre_Channel_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_mcp_module.html#ansible-collections-cisco-aci-aci-interface-policy-mcp-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > MCP Interface
  - name: MCP Interface
    cisco.aci.aci_interface_policy_mcp:
      <<: *aci_login
      mcp: "{{ item.name }}"
      admin_state: "{{ item.admin_state }}"
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ MCP_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_link_level_module.html#ansible-collections-cisco-aci-aci-interface-policy-link-level-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > Link Level
  - name: Link Level
    cisco.aci.aci_interface_policy_link_level:
      <<: *aci_login
      link_level_policy: "{{ item.name }}"
      speed: "{{ item.speed }}"
      auto_negotiation: yes
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ Link_Level_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_port_channel_module.html#ansible-collections-cisco-aci-aci-interface-policy-port-channel-module
  # APIC
  # Fabric > Access Policies > Policies > Interface > Port Channel
  - name: Port Channel
    cisco.aci.aci_interface_policy_port_channel:
      <<: *aci_login
      port_channel: "{{ item.name }}"
      mode: "{{ item.mode }}"
      state: "{{ whattodo }}"
    when: run_Interface_Policies_task
    with_items: "{{ Port_Channel_config }}"

  # Ansible
  # Module not available
  # APIC
  # Fabric > Access Policies > Policies > Interface > Spanning Tree Interface
  - name: Spanning Tree Interface
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni.xml
      method: post
      content: |
         <polUni>     <infraInfra>         <stpIfPol name="{{item.name}}" descr="" ctrl="{{item.stp_control}}" status="{{ 'deleted' if whattodo == 'absent' else '' }}"/>     </infraInfra> </polUni>
    when: run_Interface_Policies_task
    with_items: "{{ Spanning_Tree_Interface_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_leaf_policy_group_module.html#ansible-collections-cisco-aci-aci-interface-policy-leaf-policy-group-module
  # APIC
  # Fabric > Access Policies > Interfaces > Leaf Interfaces > Policy Groups > Leaf Access Port
  # Fabric > Access Policies > Interfaces > Leaf Interfaces > Policy Groups > PC Interface
  # Fabric > Access Policies > Interfaces > Leaf Interfaces > Policy Groups > VPC Interface
  - name: Interface Policy Groups. Port-Channels & vPCs
    cisco.aci.aci_interface_policy_leaf_policy_group:
      <<: *aci_login
      policy_group: "{{ item.interface_policy_group }}"
      lag_type: "{{ item.lag_type }}"
      # port_channel_policy is only for Port-Channel & vPC
      port_channel_policy: "{{ item.port_channel_policy | default(omit) }}"
      aep: "{{ item.AAEP }}"
      link_level_policy: "{{ item.link_level_policy }}"
      cdp_policy: "{{ item.cdp_policy }}"
      lldp_policy: "{{ item.lldp_policy }}"
      mcp_policy: "{{ item.mcp_policy }}"
      stp_interface_policy: "{{ item.stp_interface_policy | default('') }}"
      state: "{{ whattodo }}"       
    when: run_Interface_Policy_Group_task
    with_items: "{{ Interface_Policy_Group_task_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_policy_leaf_profile_module.html#ansible-collections-cisco-aci-aci-interface-policy-leaf-profile-module
  # APIC
  # Fabric > Access Policies > Interfaces > Leaf Interfaces > Profiles
  - name: Switch Leaf Interface Profile
    cisco.aci.aci_interface_policy_leaf_profile:
      <<: *aci_login
      interface_profile: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_IntProf') }}"
      state: "{{ whattodo }}"       
    when: run_Switch_and_Interface_Profile_task
    with_items: "{{ Switches_and_Interfaces_map }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_switch_policy_leaf_profile_module.html#ansible-collections-cisco-aci-aci-switch-policy-leaf-profile-module
  # APIC
  # Fabric > Access Policies > Switches > Leaf Switches > Profiles
  - name: Switch Leaf Profile
    cisco.aci.aci_switch_policy_leaf_profile:
      <<: *aci_login
      leaf_profile: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_SwProf') }}"
      state: "{{ whattodo }}"       
    when: run_Switch_and_Interface_Profile_task
    with_items: "{{ Switches_and_Interfaces_map }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_switch_leaf_selector_module.html#ansible-collections-cisco-aci-aci-switch-leaf-selector-module
  # APIC
  # Fabric > Access Policies > Switches > Leaf Switches > Profiles > Leaf Selectors
  - name: Switch Leaf Profile > Leaf Selectors
    cisco.aci.aci_switch_leaf_selector:
      <<: *aci_login
      leaf_profile: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_SwProf') }}"
      leaf: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_SwSel') }}"
      leaf_node_blk: blk
      from: "{{ item.switch_node_id }}"
      to: "{{ item.switch_node_id }}"
      policy_group: "{{ All_Leaf_Switches_Policy_Group | default('') }}"
      state: "{{ whattodo }}"       
    when: run_Switch_and_Interface_Profile_task
    with_items: "{{ Switches_and_Interfaces_map }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_interface_selector_to_switch_policy_leaf_profile_module.html#ansible-collections-cisco-aci-aci-interface-selector-to-switch-policy-leaf-profile-module
  # APIC
  # Fabric > Access Policies > Switches > Leaf Switches > Profiles > Associated Intreface Selector Profiles
  - name: Switch Leaf Profile > Associated Interface Selector Profiles
    cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile:
      <<: *aci_login
      leaf_profile: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_SwProf') }}"
      interface_selector: "{{ (item.switch_name + '_' + item.switch_node_id|string + '_IntProf') }}"
      state: "{{ whattodo }}"       
    when: run_Switch_and_Interface_Profile_task
    with_items: "{{ Switches_and_Interfaces_map }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_access_port_to_interface_policy_leaf_profile_module.html
  # APIC
  # Fabric > Access Policies > Interfaces > Leaf Interfaces > Profiles > Interface Selectors
  - name: Interface Selector
    cisco.aci.aci_access_port_to_interface_policy_leaf_profile:
      <<: *aci_login
      interface_profile: "{{ (item.0.switch_name + '_' + item.0.switch_node_id|string + '_IntProf') }}"
      access_port_selector: "{{ item.1.port_description|default('eth1_' + item.1.port|string, true) }}"
      port_blk: "{{ ( item.1.port|string + '_blk' ) }}"
      from_port: "{{ item.1.port }}"
      to_port: "{{ item.1.port }}"
      interface_type: "{{ item.1.interface_type }}"
      policy_group: "{{ item.1.interface_policy_group }}"
      state: "{{ whattodo }}"       
    when: (run_Interface_Selector_task) and (item.1 != 'continue')
    with_subelements: 
      - "{{ Switches_and_Interfaces_map }}"
      - ports_list

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_aep_module.html#ansible-collections-cisco-aci-aci-aep-module
  # APIC
  # Fabric > Access Policies > Policies > Global > Attachable Access Entity Profile
  - name: Attachable Access Entity Profile (AAEP)
    cisco.aci.aci_aep:
      <<: *aci_login
      aep: "{{ item.name }}"
      infra_vlan: no
      state: "{{ whattodo }}"
    when: run_AAEPs_task
    with_items: 
      - "{{ AAEP_task_config }}"

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_aep_to_domain_module.html#ansible-collections-cisco-aci-aci-aep-to-domain-module
  # APIC
  # Fabric > Access Policies > Policies > Global > Attachable Access Entity Profile
  - name: AAEP to Domain
    cisco.aci.aci_aep_to_domain:
      <<: *aci_login
      aep: "{{ item.0.name }}"
      domain_type: "{{ item.1.domain_type }}"
      domain: "{{ item.1.domain_name }}"
      state: "{{ whattodo }}"
    when: run_AAEPs_task
    with_subelements: 
      - "{{ AAEP_task_config }}"
      - domains

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_domain_module.html#ansible-collections-cisco-aci-aci-domain-module
  # APIC
  # Fabric > Access Policies > Physical and External Domains
  - name: Domains
    cisco.aci.aci_domain:
      <<: *aci_login
      domain: "{{ item.1.domain_name }}"
      domain_type: "{{ item.1.domain_type }}"
      state: "{{ whattodo }}"
    when: run_Domains_task
    with_subelements: 
      - "{{ AAEP_task_config }}"
      - domains

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_domain_to_vlan_pool_module.html#ansible-collections-cisco-aci-aci-domain-to-vlan-pool-module
  # APIC
  # Fabric > Access Policies > Physical and External Domains
  - name: Domains to VLAN pool
    cisco.aci.aci_domain_to_vlan_pool:
      <<: *aci_login
      domain_type: "{{ item.0.domain_type }}"
      domain: "{{ item.0.domain_name }}"
      pool: "{{ item.1.vlan_pool_name }}"
      pool_allocation_mode: "{{ item.1.vlan_pool_allocation_mode }}"
      state: "{{ whattodo }}"
    when: run_Domains_task
    with_subelements: 
      - "{{ AAEP_task_config | map(attribute='domains') | list | sum(start=[]) }}"
      - vlan_pools


  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_vlan_pool_module.html#ansible-collections-cisco-aci-aci-vlan-pool-module
  # APIC
  # Fabric > Access Policies > Pools > VLAN
  - name: VLAN Pools
    cisco.aci.aci_vlan_pool:
      <<: *aci_login
      pool: "{{ item.1.vlan_pool_name }}"
      pool_allocation_mode: "{{ item.1.vlan_pool_allocation_mode }}"
      state: "{{ whattodo }}"
    when: run_Pools_task
    with_subelements: 
      - "{{ AAEP_task_config | map(attribute='domains') | list | sum(start=[]) }}"
      - vlan_pools

  # Ansible
  # https://docs.ansible.com/ansible/latest/collections/cisco/aci/aci_vlan_pool_encap_block_module.html#ansible-collections-cisco-aci-aci-vlan-pool-encap-block-module
  # APIC
  # Fabric > Access Policies > Pools > VLAN
  - name: VLAN Pools. Blocks of VLANs
    cisco.aci.aci_vlan_pool_encap_block:
      <<: *aci_login
      pool: "{{ item.0.vlan_pool_name }}"
      block_start: "{{ item.1.vlan_range_start }}"
      block_end: "{{ item.1.vlan_range_end }}"
      block_name: "{{ ( item.1.vlan_range_start|string + '_' + item.1.vlan_range_end|string + '_blk' ) }}"
      pool_allocation_mode: "{{ item.0.vlan_pool_allocation_mode }}"
      state: "{{ whattodo }}"
    when: run_Pools_task
    with_subelements: 
      - "{{ AAEP_task_config | map(attribute='domains') | list | sum(start=[]) | map(attribute='vlan_pools') | list | sum(start=[]) }}"
      - vlans

